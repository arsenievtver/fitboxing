import * as React from 'react';
import dayjs from 'dayjs';
import CloseButton from '../IconButtons/CloseButton.jsx';
import './modal_calendar.css';
import useSlots from '../../hooks/useSlots.hook';
import useApi from '../../hooks/useApi.hook';
import { postBookingUrl } from '../../helpers/constants';

// ‚úÖ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º useUser
import { useUser } from '../../context/UserContext';

const ModalWindow = ({ activeDay, closeModal }) => {
    const [selectedSlot, setSelectedSlot] = React.useState(null);
    const api = useApi();

    // ‚úÖ –ø–æ–ª—É—á–∞–µ–º refreshUser –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const { user, refreshUser } = useUser();

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
    const isValidDay = activeDay && dayjs.isDayjs(activeDay);
    const startTime = isValidDay ? activeDay.startOf('day').toISOString() : null;
    const endTime = isValidDay ? activeDay.endOf('day').toISOString() : null;

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤
    const { slots, loading, error } = useSlots(startTime, endTime, !!activeDay);

    const toggleSlot = (slot) => {
        setSelectedSlot(selectedSlot?.id === slot.id ? null : slot);
    };

    const handleBooking = async (slot) => {
        try {
            const response = await api.post(postBookingUrl, {
                created_at: new Date().toISOString(),
                slot_id: slot.id,
                source_record: '—á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
            });

            if (response.status === 201) {
                alert('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!');
                await refreshUser(); // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                // ‚ö°Ô∏è –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å telegram_id ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (user?.telegram_id) {
                    const dateStr = dayjs(slot.time).format("DD.MM.YY");
                    const timeStr = dayjs(slot.time).format("HH:mm");
                    await sendTelegramMessage(user.telegram_id, dateStr, timeStr);
                }

                closeModal();
                setSelectedSlot(null);
            }
        } catch (error) {
            if (error?.response?.status === 400 && error.response.data?.detail?.includes('Already exist')) {
                alert('‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è.');
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏:', error);
                alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        }
    };

    const sendTelegramMessage = async (telegramId, date, time) => {
        const BOT_TOKEN = "7728171720:AAGyOYHnvnwScbctXvaYu2p45rKQRU_T_Ik";
        const message = `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! \n–ñ–¥–µ–º –í–∞—Å ${date} –≤ ${time} ü•ä\n
<i>–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (üë§)" ‚Üí "–ú–æ–∏ –ó–∞–ø–∏—Å–∏"</i>`;


        try {
            await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: telegramId,
                    text: message,
                    parse_mode: "HTML"
                })
            });
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", err);
        }
    };


    return (
        <div className="modal-window-bottom">
            <CloseButton onClick={closeModal} />
            {isValidDay ? (
                <p className="modal-date-label">
                    –ó–∞–ø–∏—Å—å –Ω–∞ {activeDay.format('DD.MM.YY')} - {activeDay.format('dddd')}
                </p>
            ) : (
                <p className="modal-date-label">–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.</p>
            )}

            <div className="modal-slots">
                {loading ? (
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...</p>
                ) : error ? (
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤.</p>
                ) : slots.length > 0 ? (
                    <ul>
                        {slots.map((slot) => (
                            <li key={slot.id} className="slot-item" onClick={() => toggleSlot(slot)}>
                                <div className="slot-main">
                                    <span className="slot-time">{dayjs(slot.time).format('HH:mm')}</span>
                                    <span className="slot-type">{slot.type}</span>
                                    <span className="slot-free">{slot.free_places}</span>
                                </div>
                                {selectedSlot?.id === slot.id && (
                                    <div className="slot-expanded">
                                        <span>{activeDay.format('DD.MM.YY')} {activeDay.format('dddd')}</span>
                                        <button onClick={(e) => { e.stopPropagation(); handleBooking(slot); }}>
                                            –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
                                        </button>
                                    </div>
                                )}
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.</p>
                )}
            </div>
        </div>
    );
};

export default ModalWindow;
