import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { logoutUrl, PREFIX, JWT_STORAGE_KEY, deleteBookingUrl, postAvatarMeUrl } from '../helpers/constants.js'; // –¥–æ–±–∞–≤–∏–ª deleteBookingUrl
import { createApi } from '../helpers/ApiClient';
import { useUser } from '../context/UserContext';
import MainLayout from '../components/layouts/MainLayout';
import ButtonMy from '../components/Buttons/ButtonMy.jsx';
import { FaChevronDown, FaChevronUp, FaTrash } from 'react-icons/fa';
import './UserPage.css';
import UploadAvatarModal from '../components/Forms/UploadAvatarModal';


const formatDate = (dateStr) => {
    if (!dateStr) return '-';
    const date = new Date(dateStr);
    return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    });
};

const formatTime = (dateStr) => {
    if (!dateStr) return '-';
    const date = new Date(dateStr);
    return date.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
    });
};

const Section = ({ title, children, onExpand }) => {
    const [expanded, setExpanded] = useState(false);

    const toggleExpanded = () => {
        const next = !expanded;
        setExpanded(next);
        if (next && typeof onExpand === 'function') {
            onExpand();
        }
    };

    return (
        <div className="section">
            <div className="section-header" onClick={toggleExpanded}>
                <h3>{title}</h3>
                {expanded ? <FaChevronUp /> : <FaChevronDown />}
            </div>
            {expanded && <div className="section-content">{children}</div>}
        </div>
    );
};

const UserRow = ({ label, value }) => (
    <div className="row">
        <span className="label">{label}</span>
        <span className="value">{value}</span>
    </div>
);

const SlotRow = ({ slot, onDelete }) => (
    <div className="row booking-row">
        <span className="value">{formatDate(slot.time)}</span>
        <span className="value">{formatTime(slot.time)}</span>
        <span className="value">{(slot.type)}</span>
        <span className="trash-booking">
            <FaTrash
                style={{ marginLeft: '10px', cursor: 'pointer', color: 'var(--primary-color-2)' }}
                onClick={() => onDelete(slot.bookingId)}
                title="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"
            />
        </span>
    </div>
);


const UserPage = () => {
    const { user, setUser, refreshUser } = useUser();
    const navigate = useNavigate();
    const api = createApi(navigate);
    const [showUploadModal, setShowUploadModal] = useState(false);

    const handleLogout = async () => {
        try {
            await api.post(PREFIX + logoutUrl);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        } finally {
            localStorage.removeItem(JWT_STORAGE_KEY);
            localStorage.removeItem('refresh_token_ios'); // üí• —É–¥–∞–ª—è–µ–º refresh
            // –ò–ª–∏: localStorage.clear(); ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            setUser(null);
            navigate('/');
        }
    };


    const handleExpandBookings = () => {
        // –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    };

    const handleDeleteBooking = async (bookingId) => {
        if (!bookingId) {
            alert('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            return;
        }

        const confirmed = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?');
        if (!confirmed) return;

        try {
            await api.delete(PREFIX + deleteBookingUrl(bookingId));
            await refreshUser();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    };

    if (!user) return null;

    const upcomingBookings = user.bookings.filter(booking => {
        const today = new Date();
        const slotTime = new Date(booking.slot?.time);
        return booking.is_done === false && slotTime >= today;
    }).sort((a, b) => new Date(a.slot.time) - new Date(b.slot.time));

    return (
        <MainLayout>
            <div
                className={`user-avatar-block ${user.gender === '–∂–µ–Ω' ? 'female' : ''}`}
                onClick={() => setShowUploadModal(true)}
                style={{ cursor: 'pointer' }}
                title="–ö–ª–∏–∫–Ω–∏—Ç–µ, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"
            >
                <img
                    src={user.photo_url || (user.gender === '–∂–µ–Ω' ? "/images/avatar-f-y.webp" : "/images/avatar.webp")}
                    alt="–ê–≤–∞—Ç–∞—Ä"
                    className="avatar-img"
                />
                <div className="username">{user.name} {user.last_name}</div>
            </div>



            <div className="user_data">
                <Section title="–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
                    <UserRow label="–¢–µ–ª–µ—Ñ–æ–Ω:" value={user.phone || '-'} />
                    <UserRow label="Email:" value={user.email || '-'} />
                </Section>

                <Section title="–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ">
                    <UserRow label="–ò–º—è:" value={user.name || '-'} />
                    <UserRow label="–§–∞–º–∏–ª–∏—è:" value={user.last_name || '-'} />
                    <UserRow label="–ü–æ–ª:" value={user.gender || '-'} />
                    <UserRow label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:" value={formatDate(user.date_of_birth)} />
                </Section>

                <Section title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞">
                    <UserRow label="–ë–∞–ª–∞–Ω—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:" value={user.score ?? 0} />
                    <UserRow label="–£—Ä–æ–≤–µ–Ω—å:" value={user?.statusName} />
                    <UserRow label="–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–ª–ª–∞—Ö:" value={Math.round(user.energy) ?? 0} />
                    <UserRow label="–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:" value={user.count_trainings ?? 0} />
                    <UserRow label="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:" value={formatDate(user.created_at)} />
                </Section>

                <Section title="–ú–æ–∏ –∑–∞–ø–∏—Å–∏" onExpand={handleExpandBookings}>
                    {upcomingBookings.length > 0 ? (
                        upcomingBookings.map(booking => (
                            <SlotRow
                                key={booking.id}
                                slot={{ ...booking.slot, bookingId: booking.id }}
                                onDelete={handleDeleteBooking}
                            />
                        ))
                    ) : (
                        <div className="row"><span className="value">–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</span></div>
                    )}
                </Section>

                <ButtonMy onClick={handleLogout} className="button_exit">–í—ã–π—Ç–∏</ButtonMy>
            </div>
            <br /><br /><br /><br />
            {showUploadModal && (
                <UploadAvatarModal
                    onClose={() => setShowUploadModal(false)}
                    onUpload={async (formData) => {
                        try {
                            await api.post(PREFIX + postAvatarMeUrl, formData);
                            await refreshUser(); // –æ–±–Ω–æ–≤–∏–º user
                            setShowUploadModal(false);
                        } catch (err) {
                            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞", err);
                            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.");
                        }
                    }}
                />
            )}

        </MainLayout>
    );
};

export default UserPage;